#include <iostream>
using namespace std;
#define MaxSize 50
typedef char ElemType;
typedef struct node
{
	ElemType data;
	struct node* lchild;
	struct node* rchild;
}BTNode;
void CreateBTree(BTNode*& b, char* str)
{
	BTNode* St[MaxSize], * p;
	int top = -1, k=0, j = 0;
	char ch='\0';
	ch = str[j];
	p = (BTNode*)malloc(sizeof(BTNode));
	while (ch != '\0')
	{
		switch (ch)
		{
		case '(':top++; St[top] = p; k = 1; break;
		case ')':top--; break;
		case ',':k = 2; break;
		default:
			if (b != NULL)
			{
				p = (BTNode*)malloc(sizeof(BTNode));
			}
			p->data = ch;
			p->lchild = p->rchild = NULL;
			if (b == NULL)
			{
				b = p;
			}
			else
			{
				switch (k)
				{
				case 1:St[top]->lchild = p; break;
				case 2:St[top]->rchild = p; break;
				}
			}
		}
		j++;
		ch = str[j];
	}
}
struct SqStack
{
	BTNode* data[MaxSize];
	int top = -1;
};
void InitStack(SqStack*& s)
{
	s = (SqStack*)malloc(sizeof(SqStack));
	if (s == nullptr)cout << "栈内存分配失败" << endl;
	else
		s->top = -1;
}
bool Push(SqStack*& s, BTNode* e)
{
	if (s->top == MaxSize - 1)
		return false;
	s->top++;
	s->data[s->top] = e;
	return true;
}
bool Pop(SqStack*& s, BTNode*& e)
{
	if (s->top == -1)return false;
	e = s->data[s->top];
	s->top--;
	return true;
}
bool GetTop(SqStack* s, BTNode*& e)
{
	if (s->top == -1)return 0;
	e = s->data[s->top];
	return true;
}
bool StackEmpty(SqStack* s)
{
	return (s->top == -1);
}
void DestroyStack(SqStack*& s)
{
	free(s);
}
void PostOrder(BTNode* b)
{
	BTNode* root, * t=NULL;
	int flag = 2;
	SqStack* st;
	InitStack(st);
	root = b;
	do
	{
		while (root != NULL)
		{
			Push(st, root);
			root = root->lchild;
		}
		t = NULL;
		flag = 2;
		while (!StackEmpty(st) && flag == 2)
		{
			GetTop(st, root);
			if (root->rchild == t)
			{
				printf_s("%c", root->data);
				Pop(st, root);
				t = root;
			}
			else
			{
				root = root->rchild;
				flag = 1;
			}
		}
	} while (!StackEmpty(st));
	printf_s("\n");
	DestroyStack(st);
}
int main()
{
	BTNode* b = nullptr;
	char str[MaxSize] = { '\0' };
	cin >> str;
	CreateBTree(b, str);
	PostOrder(b);
	return 0;
}
