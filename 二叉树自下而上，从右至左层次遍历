#include <iostream>
using namespace std;
#define MaxSize 50
typedef char ElemType;
typedef struct node
{
	ElemType data;
	struct node* lchild;
	struct node* rchild;
}BTNode;
void CreateBTree(BTNode*& b, char* str)
{
	BTNode* St[MaxSize], * p;
	int top = -1, k=0, j = 0;
	char ch='\0';
	ch = str[j];
	p = (BTNode*)malloc(sizeof(BTNode));
	while (ch != '\0')
	{
		switch (ch)
		{
		case '(':top++; St[top] = p; k = 1; break;
		case ')':top--; break;
		case ',':k = 2; break;
		default:
			if (b != NULL)
			{
				p = (BTNode*)malloc(sizeof(BTNode));
			}
			p->data = ch;
			p->lchild = p->rchild = NULL;
			if (b == NULL)
			{
				b = p;
			}
			else
			{
				switch (k)
				{
				case 1:St[top]->lchild = p; break;
				case 2:St[top]->rchild = p; break;
				}
			}
		}
		j++;
		ch = str[j];
	}
}
void DispBTree(BTNode* b)
{
	if (b != NULL)
	{
		printf_s("%c", b->data);
		if (b->lchild != NULL || b->rchild != NULL)
		{
			printf_s("(");
			DispBTree(b->lchild);
			if (b->rchild != NULL)printf_s(",");
			DispBTree(b->rchild);
			printf_s(")");
		}
	}
}
typedef struct
{
	BTNode* data[MaxSize];
	int front, rear;
}SqQueue;
void InitQueue(SqQueue*& q)
{
	q = (SqQueue*)malloc(sizeof(SqQueue));
	q->front = q->rear = -1;
}
void DestroyQueue(SqQueue*& q)
{
	free(q);
}
bool QueueEmpty(SqQueue* q)
{
	return(q->front == q->rear);
}
bool enQueue(SqQueue*& q, BTNode* e)
{
	if (q->rear == MaxSize - 1)
		return false;
	q->rear++;
	q->data[q->rear] = e;
	return true;
}
bool deQueue(SqQueue*& q, BTNode*& e)
{
	if (q->front == q->rear)return false;
	q->front++;
	e = q->data[q->front];
	return true;
}
struct SqStack
{
	BTNode* data[MaxSize];
	int top = -1;
};
void InitStack(SqStack*& s)
{
	s = (SqStack*)malloc(sizeof(SqStack));
	if (s == nullptr)cout << "栈内存分配失败" << endl;
	else
		s->top = -1;
}
bool Push(SqStack*& s, BTNode* e)
{
	if (s->top == MaxSize - 1)
		return false;
	s->top++;
	s->data[s->top] = e;
	return true;
}
bool Pop(SqStack*& s, BTNode*& e)
{
	if (s->top == -1)return false;
	e = s->data[s->top];
	s->top--;
	return true;
}
void DispStack(SqStack* s)
{
	BTNode* e;
	while (s->top != -1)
	{
		Pop(s, e);
		cout << e->data << " ";
	}
	cout << endl;
}
void LevelOrder(BTNode* b)
{
	BTNode* p;
	SqQueue* qu;
	SqStack* s;
	if (b == NULL)return;
	InitQueue(qu);
	InitStack(s);
	enQueue(qu,b);
	while (!QueueEmpty(qu))
	{
		deQueue(qu, p);
		Push(s, p);

		if (p->lchild != NULL)
			enQueue(qu, p->lchild);
		if(p->rchild != NULL)
			enQueue(qu, p->rchild);

	}
	DestroyQueue(qu);
	DispStack(s);


}
int main()
{
	BTNode* b = nullptr; int n = 0;
	char str[MaxSize] = { '\0' };
	cin >> str;
	CreateBTree(b, str);
	LevelOrder(b);
	return 0;
}
