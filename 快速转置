#include <iostream>

using namespace std;
#define MaxSize 50
typedef int ElemType;
typedef struct
{
	int r;
	int c;
	ElemType d;
}TupNode;
typedef struct
{
	int rows;
	int cols;
	int nums;
	TupNode data[MaxSize];
}TSMatrix;
void CreateMat(TSMatrix& t, ElemType A[50][50], int M, int N)
{
	int i = 0, j = 0;
	t.rows = M; t.cols = N; t.nums = 0;
	for(i=0;i<M;i++)
	{
		for (j = 0; j < N; j++)
			if (A[i][j] != 0)
			{
				t.data[t.nums].r = i;
				t.data[t.nums].c = j;
				t.data[t.nums].d = A[i][j];
				t.nums++;
			}
	}
}
void Dispdata(ElemType A[50][50], int M, int N)
{
	for (int i = 0; i < M; i++)
	{
		cout << endl;
		for (int j = 0; j < N; j++)
		{
			printf("\t%d", A[i][j]);
		}
	}
	cout << endl;
}
void DispMat(TSMatrix t)
{
	if (t.nums <= 0)return;
	cout << "rows=" << t.rows << "cols=" << t.cols << "nums" << t.nums << endl;
	for (int k = 0; k < t.nums; k++)
		printf_s("\t % d\t % d\t % d\n", t.data[k].r, t.data[k].c, t.data[k].d);
}
void TranTat(TSMatrix b, TSMatrix& tb)
{
	tb.rows = b.cols;
	tb.cols = b.rows;
	tb.nums = b.nums;
	if (tb.nums)
	{
		int col = 0;
		int num[100] = {0}, cpot[100] = {0};
		for (int t = 0; t < b.nums; t++)
		{
			num[b.data[t].c]++;
		}
	
		for (col = 1; col <= b.cols; col++)
			cpot[col] = cpot[col - 1] + num[col - 1];
		int q = 0;
		for (int p = 0; p < b.nums; p++)
		{
			col = b.data[p].c;
			q = cpot[col];
			tb.data[q].r = b.data[p].c;
			tb.data[q].c = b.data[p].r;
			tb.data[q].d = b.data[p].d;
			cpot[col]++;
		}
	}

}
void trandata(TSMatrix b, ElemType B[50][50])
{
	for (int i = 0; i < b.nums; i++)
	{
		B[b.data[i].r][b.data[i].c] = b.data[i].d;
	}
}
int main()
{
	int A[MaxSize][MaxSize]={0}; int TA[MaxSize][MaxSize] = { 0 };
	TSMatrix b, tb;
	int r = 0, c = 0;
	int d = 0;
	int num[MaxSize] = { 0 };
	int cpot[MaxSize] = { 0 };
	cout << "请输入行数" << endl;
	cin >> r;
	cout << "请输入列数" << endl;
	cin >> c;
	cout << "请输入值" << endl;
	for (int i = 0; i < r; i++)
		for (int j = 0; j < c; j++)
		{
			cin >> d;
			A[i][j] = d;
		}
	Dispdata(A, r, c);
	CreateMat(b, A, r, c);
	DispMat(b);
	TranTat(b, tb);
	DispMat(tb);
	trandata(tb, TA);
	Dispdata(TA,c,r);

}
