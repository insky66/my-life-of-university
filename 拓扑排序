#include <iostream>
using namespace std;
typedef int ElemType;
#define MaxSize 50

struct SqStack
{
    ElemType data[MaxSize];
    int top = -1;
};
void InitStack(SqStack*& s)
{
    s = (SqStack*)malloc(sizeof(SqStack));
    if (s == nullptr)cout << "栈内存分配失败" << endl;
    else
        s->top = -1;
}
void DestroyStack(SqStack*& s)
{
    free(s);
}
bool StackEmpty(SqStack* s)
{
    return (s->top == -1);
}
bool Push(SqStack*& s, ElemType e)
{
    if (s->top == MaxSize - 1)
        return false;
    s->top++;
    s->data[s->top] = e;
    return true;
}
bool Pop(SqStack*& s, ElemType& e)
{
    if (s->top == -1)return false;
    e = s->data[s->top];
    s->top--;
    return true;
}
bool GetTop(SqStack* s, ElemType& e)
{
    if (s->top == -1)return 0;
    e = s->data[s->top];
    return true;
}

#define INF 32767
typedef struct ANode
{
    int adjvex;//邻接点编号
    struct ANode* nextarc;
    int weight=0;
}ArcNode;//边结点
typedef struct Vnode
{
    ArcNode* firstarc;
    int rudu = 0;;      //在此处加一个入度即可
}VNode;//头结点
typedef struct
{
    VNode adjlist[MaxSize];//邻接表的头结点数组
    int n, e;//n为顶点数，e为边数
}AdjGraph; //图邻接表
void CreateAdj(AdjGraph*& G, int A[MaxSize][MaxSize], int n, int e)
{
    int i, j; ArcNode* p;
    G = (AdjGraph*)malloc(sizeof(AdjGraph));
    for (i = 0; i < n; i++)
        G->adjlist[i].firstarc = NULL;
    for (i = 0; i < n; i++)
    {
        for (j = n - 1; j >= 0; j--)
        {
            if (A[i][j] != 0 && A[i][j] != INF)
            {
                p = (ArcNode*)malloc(sizeof(ArcNode));
                p->adjvex = j;
                p->weight = A[i][j];
                p->nextarc = G->adjlist[i].firstarc;
                G->adjlist[i].firstarc = p;
            }
        }
    }
    G->n = n; G->e = e;
}
void DispAdj(AdjGraph* G)
{
    int i; ArcNode* p;
    for (i = 0; i < G->n; i++)
    {
        p = G->adjlist[i].firstarc;
        printf_s("%3d: ", i);
        while (p != NULL)
        {
            printf_s("%3d[%d]->", p->adjvex, p->weight);
            p = p->nextarc;
        }
        printf_s("\n");
    }
}

void qiurudu(AdjGraph*& G)
{
    ANode* p;
    for (int k = 0; k < G->n; k++)
        G->adjlist[k].rudu = 0;
    for (int i = 0; i < G->n; i++)
    {
        p = G->adjlist[i].firstarc;
        while (p != NULL)
        {
            G->adjlist[p->adjvex].rudu++;
            p = p->nextarc;
        }
    }
    for (int j = 0; j < G->n; j++)
    {
        cout << j << "的入度为：";
        cout << G->adjlist[j].rudu << endl;;
    }
}
void Disprudu(AdjGraph* G)
{
    for (int j = 0; j < G->n; j++)
    {
        cout << j << "的入度为：";
        cout << G->adjlist[j].rudu << endl;;
    }
}

void tuopu(AdjGraph* G)
{
    int visited[MaxSize] = { 0 };
    int count = 0; int v=0;
    SqStack* s;
    InitStack(s);
    ArcNode* p;
    for (int j = 0; j < G->n; j++)
    {
        if (G->adjlist[j].rudu == 0)
        {
            Push(s, j);
            visited[j] = 1;
            break;
        }
    }
    while (!StackEmpty(s))
    {
        Pop(s, v);
        printf_s("%d->", v);
        count++;
        p = G->adjlist[v].firstarc;
        while (p != NULL)
        {
            G->adjlist[p->adjvex].rudu--;
            p = p->nextarc;
        }
        for (int k = 0; k < G->n; k++)
        {
            if (G->adjlist[k].rudu == 0&&visited[k]==0)
            {
                Push(s, k);
                visited[k] = 1;
                break;
            }
        }
    }
    cout << endl;
    if (count < G->n)
        printf_s("存在回路");
}

int main()
{
    int n, e;
    int A[MaxSize][MaxSize] = { 0 };
    printf_s("请输入图的顶点数\n");
    cin >> n;
    printf_s("请输入图的边数\n");
    cin >> e;
    printf_s("请输入图的临界矩阵\n");
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            cin >> A[i][j];
        }
    }
    printf_s("图的临界矩阵为：\n"); 
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            cout << A[i][j] << " ";
        }
        cout << endl;
    }
    AdjGraph* G;
    CreateAdj(G, A, n, e);
    printf_s("图的邻接表为：\n");
    DispAdj(G);
    printf_s("图中各顶点入度为：\n");
    qiurudu(G);
    printf_s("图的拓扑排序为：\n");
    tuopu(G);
    return 0;
}
