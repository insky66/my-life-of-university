#include "stdio.h"
#include <cstdlib>
#include <iostream>
using namespace std;
typedef char ElemType;
#define MaxSize 50
struct SqStack
{
	ElemType data[MaxSize];
	int top = -1;
};
void InitStack(SqStack*& s)
{
	s = (SqStack*)malloc(sizeof(SqStack));
	if (s == nullptr)cout << "栈内存分配失败" << endl;
	else
		s->top = -1;
}
void DestroyStack(SqStack*& s)
{
	free(s);
}
bool StackEmpty(SqStack* s)
{
	return (s->top == -1);
}
bool Push(SqStack*& s, ElemType e)
{
	if (s->top == MaxSize - 1)
		return false;
	s->top++;
	s->data[s->top] = e;
	return true;
}
bool Pop(SqStack*& s, ElemType& e)
{
	if (s->top == -1)return false;
	e = s->data[s->top];
	s->top--;
	return true;
}
bool GetTop(SqStack* s, ElemType& e)
{
	if (s->top == -1)return 0;
	e = s->data[s->top];
	return true;
}

struct SqStack1
{
	double data[MaxSize];
	int top = -1;
};
void InitStack1(SqStack1*& s)
{
	s = (SqStack1*)malloc(sizeof(SqStack1));
	if (s == nullptr)cout << "栈内存分配失败" << endl;
	else
		s->top = -1;
}
void DestroyStack1(SqStack1*& s)
{
	free(s);
}
bool StackEmpty1(SqStack1* s)
{
	return (s->top == -1);
}
bool Push1(SqStack1*& s, double e)
{
	if (s->top == MaxSize - 1)
		return false;
	s->top++;
	s->data[s->top] = e;
	return true;
}
bool Pop1(SqStack1*& s, double& e)
{
	if (s->top == -1)return false;
	e = s->data[s->top];
	s->top--;
	return true;
}
bool GetTop1(SqStack1* s, double& e)
{
	if (s->top == -1)return 0;
	e = s->data[s->top];
	return true;
}
void trans(char* exp, char postexp[])
{
	char e=0;
	SqStack* Optr;
	InitStack(Optr);
	int i = 0;
	while (*exp != '\0')
	{
		switch (*exp)
		{
		case'(':Push(Optr, '(');
			exp++;
			break;
		case ')':Pop(Optr, e);
			while (e != '(')
			{
				postexp[i++] = e;
				Pop(Optr, e);
			}
			exp++;
			break;
		case '-':
		case '+':
			while (!StackEmpty(Optr))
			{
				GetTop(Optr, e);
				if (e != '(')
				{
					postexp[i++]=e;
					Pop(Optr, e);
				}
				else
					break;
			}
			Push(Optr, *exp);
			exp++;
			break;
		case '*':
		case '/':
			while (!StackEmpty(Optr))
			{
				GetTop(Optr, e);
				if (e == '*' || e == '/')
				{
					postexp[i++] = e;
					Pop(Optr, e);
				}
				else
					break;
			}
			Push(Optr, *exp);
			exp++;
			break;
		default:
			while (*exp >= '0' && *exp <= '9')
			{
				postexp[i++] = *exp;
				exp++;
			}
			postexp[i++] = '#';
		}
	}
	while (!StackEmpty(Optr))
	{
		Pop(Optr, e);
		postexp[i++] = e;
	}
		postexp[i] = '\0';
		DestroyStack(Optr);
	
}
double compvalue(char* postexp)
{
	double d=0, a=0, b=0, c=0, e=0;
	SqStack1* Opnd;
	InitStack1(Opnd);
	while(*postexp!='\0')
	{
		switch (*postexp)
		{
		case'+':
			Pop1(Opnd, a);
			Pop1(Opnd, b);
			c = a + b;
			Push1(Opnd, c);
			break;
		case'-':
			Pop1(Opnd, a);
			Pop1(Opnd, b);
			c = b - a;
			Push1(Opnd, c);
			break;
		case'*':
			Pop1(Opnd, a);
			Pop1(Opnd, b);
			c = b * a;
			Push1(Opnd, c);
			break;
		case'/':
			Pop1(Opnd, a);
			Pop1(Opnd, b);
			if (a != 0)
			{
				c = b / a;
				Push1(Opnd, c);
				break;
			}
			else
			{
				cout << endl << "除零错误" << endl;
				exit(0);
			}
			break;
		default:
			d = 0;
			while (*postexp >= '0' && *postexp <= '9')
			{
				d = 10 * d + *postexp - '0';
				postexp++;
			}
			Push1(Opnd, d);
			break;
		}
		postexp++;
	}
	GetTop1(Opnd, e);
	DestroyStack1(Opnd);
	return e;
}
int main() 
{
	char exp[MaxSize] = "\0";
	char postexp[MaxSize] ="\0";
	int i = 0;
	cout << "请输入表达式" << endl;
	cin >> exp;
	int t = 0;
	for (i = 0; exp[i] != NULL; i++)
	{
		if (exp[i] == '+' || exp[i] == '-' ||
			exp[i] == '*' || exp[i] == '/' ||
			exp[i] == '(' || exp[i] == ')' ||
			exp[i] > '0' && exp[i] < '9')
			t = 0;
		else 
		{
			t = 1; break;
		}
	}//检验输入合法性
	if (t == 1)
	{
		cout << "输入不规范请退出重新输入";
		exit(0);
	}
	exp[i] = '\0';
	trans(exp, postexp);
	printf_s("中缀表达式：%s\n", exp);
	printf_s("后缀表达式：%s\n", postexp);
	printf_s("表达式的值：%g\n", compvalue(postexp));
	return 0;
}

