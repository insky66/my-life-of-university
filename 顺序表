#include "stdio.h"
#include <cstdlib>
#include <iostream>
using namespace std;
typedef int ElemType;
#define MaxSize 50
struct SqList
{
	ElemType data[MaxSize];
	int length = 0;
};
void CreateList(SqList*& L, ElemType a[], int n)  //初始化线性表
{
	int i = 0, k = 0;
	L = (SqList*)malloc(sizeof(SqList));
	if (L == nullptr)cout << "顺序表内存分配失败"<<endl;
	else
	{
			while (i < n)
			{
				L->data[k] = a[i];
				k++; i++;
			}
		L->length = k;
	}
}
void DispList(SqList* L)                     //输出线性表
{
	for (int i = 0; i < L->length; i++)
		printf("%d", L->data[i]);
	printf("\n");

}
void InitList(SqList*& L) //初始化
{
	L = (SqList*)malloc(sizeof(SqList));
	if (L == nullptr)cout << "顺序表内存分配失败"<<endl;
	else L->length = 0;
}
void DestryList(SqList* L)//销毁
{
	free(L);
}
bool ListEmpty(SqList* L)//判断空表，1为空
{
	return (L->length == 0);
}
int ListLength(SqList* L)//线性表长度
{
	return L->length;
}
bool GetElem(SqList* L, int i, ElemType& e)
{
	if (i<1 || i>L->length)
		return false;
	e = L->data[i - 1];
	return true;
}
int LocateElem(SqList* L, ElemType e)
{
	int i = 0;
	while (i < L->length && e != L->data[i])
		i++;
	if (i > L->length)
		return 0;
	else return i+1;
}
bool ListInsert(SqList*& L, int i, ElemType e)
{
	int j;
	if (i<1 || i>L->length+1 || L->length == MaxSize)
		return false;
	i--;
	for (j = L->length; j > i; j--)
		L->data[j] = L->data[j - 1];
	L->data[i] = e;
	L->length++;
	return true;
}
bool ListDelete(SqList*& L, int i, ElemType &e)
{
	int j;
	if (i<1 || i>L->length)
		return false;
	i--;
	e = L->data[i];
	for (j = i; j < L->length - 1; j++)
		L->data[j] = L->data[j + 1];
	L->length--;
	return true;
}
